// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: proto/filebank.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileBankServiceClient is the client API for FileBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileBankServiceClient interface {
	AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeResponse, error)
	UploadFiles(ctx context.Context, opts ...grpc.CallOption) (FileBankService_UploadFilesClient, error)
	DownloadFiles(ctx context.Context, opts ...grpc.CallOption) (FileBankService_DownloadFilesClient, error)
}

type fileBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileBankServiceClient(cc grpc.ClientConnInterface) FileBankServiceClient {
	return &fileBankServiceClient{cc}
}

func (c *fileBankServiceClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeResponse, error) {
	out := new(AddNodeResponse)
	err := c.cc.Invoke(ctx, "/filebank.FileBankService/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileBankServiceClient) UploadFiles(ctx context.Context, opts ...grpc.CallOption) (FileBankService_UploadFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileBankService_ServiceDesc.Streams[0], "/filebank.FileBankService/UploadFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileBankServiceUploadFilesClient{stream}
	return x, nil
}

type FileBankService_UploadFilesClient interface {
	Send(*UploadFilesRequest) error
	Recv() (*UploadFilesResponse, error)
	grpc.ClientStream
}

type fileBankServiceUploadFilesClient struct {
	grpc.ClientStream
}

func (x *fileBankServiceUploadFilesClient) Send(m *UploadFilesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileBankServiceUploadFilesClient) Recv() (*UploadFilesResponse, error) {
	m := new(UploadFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileBankServiceClient) DownloadFiles(ctx context.Context, opts ...grpc.CallOption) (FileBankService_DownloadFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileBankService_ServiceDesc.Streams[1], "/filebank.FileBankService/DownloadFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileBankServiceDownloadFilesClient{stream}
	return x, nil
}

type FileBankService_DownloadFilesClient interface {
	Send(*DownloadFilesRequest) error
	Recv() (*DownloadFilesResponse, error)
	grpc.ClientStream
}

type fileBankServiceDownloadFilesClient struct {
	grpc.ClientStream
}

func (x *fileBankServiceDownloadFilesClient) Send(m *DownloadFilesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileBankServiceDownloadFilesClient) Recv() (*DownloadFilesResponse, error) {
	m := new(DownloadFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileBankServiceServer is the server API for FileBankService service.
// All implementations must embed UnimplementedFileBankServiceServer
// for forward compatibility
type FileBankServiceServer interface {
	AddNode(context.Context, *AddNodeRequest) (*AddNodeResponse, error)
	UploadFiles(FileBankService_UploadFilesServer) error
	DownloadFiles(FileBankService_DownloadFilesServer) error
	mustEmbedUnimplementedFileBankServiceServer()
}

// UnimplementedFileBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileBankServiceServer struct {
}

func (UnimplementedFileBankServiceServer) AddNode(context.Context, *AddNodeRequest) (*AddNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedFileBankServiceServer) UploadFiles(FileBankService_UploadFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedFileBankServiceServer) DownloadFiles(FileBankService_DownloadFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFiles not implemented")
}
func (UnimplementedFileBankServiceServer) mustEmbedUnimplementedFileBankServiceServer() {}

// UnsafeFileBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileBankServiceServer will
// result in compilation errors.
type UnsafeFileBankServiceServer interface {
	mustEmbedUnimplementedFileBankServiceServer()
}

func RegisterFileBankServiceServer(s grpc.ServiceRegistrar, srv FileBankServiceServer) {
	s.RegisterService(&FileBankService_ServiceDesc, srv)
}

func _FileBankService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileBankServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filebank.FileBankService/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileBankServiceServer).AddNode(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileBankService_UploadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileBankServiceServer).UploadFiles(&fileBankServiceUploadFilesServer{stream})
}

type FileBankService_UploadFilesServer interface {
	Send(*UploadFilesResponse) error
	Recv() (*UploadFilesRequest, error)
	grpc.ServerStream
}

type fileBankServiceUploadFilesServer struct {
	grpc.ServerStream
}

func (x *fileBankServiceUploadFilesServer) Send(m *UploadFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileBankServiceUploadFilesServer) Recv() (*UploadFilesRequest, error) {
	m := new(UploadFilesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileBankService_DownloadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileBankServiceServer).DownloadFiles(&fileBankServiceDownloadFilesServer{stream})
}

type FileBankService_DownloadFilesServer interface {
	Send(*DownloadFilesResponse) error
	Recv() (*DownloadFilesRequest, error)
	grpc.ServerStream
}

type fileBankServiceDownloadFilesServer struct {
	grpc.ServerStream
}

func (x *fileBankServiceDownloadFilesServer) Send(m *DownloadFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileBankServiceDownloadFilesServer) Recv() (*DownloadFilesRequest, error) {
	m := new(DownloadFilesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileBankService_ServiceDesc is the grpc.ServiceDesc for FileBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filebank.FileBankService",
	HandlerType: (*FileBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _FileBankService_AddNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFiles",
			Handler:       _FileBankService_UploadFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFiles",
			Handler:       _FileBankService_DownloadFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/filebank.proto",
}
